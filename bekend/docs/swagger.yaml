openapi: 3.0.0
info:
  title: Pivo API
  version: 1.0.0
  description: API документация для Pivo

servers:
  - url: http://localhost:3000/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category:
          type: string
        images:
          type: array
          items:
            type: string
        isAvailable:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              product:
                type: string
              quantity:
                type: number
              price:
                type: number
        status:
          type: string
          enum: [pending, processing, delivered, cancelled]
        totalAmount:
          type: number
        deliveryAddress:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            zipCode:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Вход в систему
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'

  /products:
    get:
      tags:
        - Products
      summary: Получение списка продуктов
      parameters:
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: Список продуктов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      tags:
        - Products
      summary: Создание нового продукта
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Продукт создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /orders:
    post:
      tags:
        - Orders
      summary: Создание нового заказа
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Заказ создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

    get:
      tags:
        - Orders
      summary: Получение списка заказов
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список заказов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order' 